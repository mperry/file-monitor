
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "signing"

defaultTasks "build"

ext {
    baseVersion = "0.3"
    isSnapshot = true
    snap = "-SNAPSHOT"
}

ext {
    sonatypeBaseUrl = "https://oss.sonatype.org"
    sonatypeSnapshotUrl = "$sonatypeBaseUrl/content/repositories/snapshots/"
    sonatypeRepositoryUrl = "$sonatypeBaseUrl/content/groups/public"
    sonatypeReleaseUrl = "$sonatypeBaseUrl/service/local/staging/deploy/maven2/"
    sonatypeUploadUrl = isSnapshot ? sonatypeSnapshotUrl : sonatypeReleaseUrl

    projectUrl = "https://github.com/mperry/file-monitor"
    projectName = "FileMonitor"
    pomProjectName = "FileMonitor"
    baseJarName = "file-monitor"

    groupName = "com.github.mperry"
    scmGitFile = "scm:git@github.com:mperry/file-monitor.git"
    projectDescription = "Creates file systems events as stream or observable watch events"

    founder = "Mark Perry"
    founderUsername = "mperry"
    organisation = groupName

    admin = true

}

group = groupName
archivesBaseName = baseJarName
version = (baseVersion + (isSnapshot ? snap : "")).toString()

repositories {
	jcenter()
//    mavenCentral()
}

sourceCompatibility = 1.8

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.7'
	compile "org.slf4j:slf4j-log4j12:1.7.7"
	compile "org.apache.commons:commons-lang3:3.3.2"
	compile 'commons-io:commons-io:1.4'
	compile "org.functionaljava:functionaljava:5.0"
    compile "com.netflix.rxjava:rxjava-core:0.20.7"

    testCompile 'junit:junit:4.11'
}

Boolean doSigning() {
    signingEnabled.toBoolean()
}

task javadocJar(type: Jar, dependsOn: "javadoc") {
	classifier = 'javadoc'
	from "build/docs/javadoc"
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

if (doSigning()) {
	signing {
		sign configurations.archives
	}
}

publishing {

    publications {

        mavenJava(MavenPublication) {
            groupId project.groupName
            artifactId baseJarName
            version version

            from components.java

            customizePom(pom, rootProject)

            artifact sourcesJar
            artifact javadocJar

            if (admin) {
                // sign the pom
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }

                // sign the artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc|jre9)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }

        }

    }


    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url sonatypeUploadUrl
            if (admin) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

}


model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publish {
        dependsOn(project.tasks.build)
    }
    tasks.install {
        dependsOn(project.tasks.build)
    }
}


def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'File Monitor'
            description projectDescription
            url "https://github.com/mperry/file-monitor"
            organization {
                name 'Mark Perry'
                url 'https://github.com/mperry'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/mperry/file-monitor/issues'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/mperry/file-monitor'
                connection 'scm:git:git://github.com/mperry/file-monitor.git'
                developerConnection 'scm:git:ssh://git@github.com/mperry/file-monitor.git'
            }
            developers {
                developer {
                    id 'mperry'
                    name 'Mark Perry'
                    email 'maperry78@yahoo.com.au'
                }
            }
        }
    }
}


task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}


task release() {
    group 'Project'
    description 'Builds everything for the release.'

    dependsOn build
    dependsOn javadoc
//    dependsOn jacocoTestReport
}


/*
uploadArchives.enabled = true
uploadArchives {
    repositories {
        mavenDeployer {
            if (doSigning()) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }

            repository(url: sonatypeUploadUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom {
                groupId = project.groupName
                project {
                    name pomProjectName
                    packaging 'jar'
                    description projectDescription
                    url projectUrl

                    scm {
                        url "${projectUrl}.git"
                        connection scmGitFile
                        developerConnection scmGitFile
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id project.founderUsername
                            name project.founder
                        }
                    }
                }

            }

        }
    }
}
*/


